{"ast":null,"code":"var _jsxFileName = \"/Users/EthanTran/Desktop/Squid-Note/src/context/EventsContext.js\",\n    _s = $RefreshSig$();\n\n// Set up context API \nimport React, { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EventsContext = /*#__PURE__*/createContext(); //UseState to store the list of Events in backends \n\nexport const EventsContextProvider = props => {\n  _s();\n\n  const [events, setEvents] = useState([]); //Render UI for Adding new events\n\n  const addEvents = event => {\n    setEvents([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(EventsContext.Provider, {\n    value: {\n      events,\n      setEvents\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EventsContextProvider, \"fh+hzEDekCPeegwQh0J56A4r3Ew=\");\n\n_c = EventsContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventsContextProvider\");","map":{"version":3,"sources":["/Users/EthanTran/Desktop/Squid-Note/src/context/EventsContext.js"],"names":["React","useState","createContext","EventsContext","EventsContextProvider","props","events","setEvents","addEvents","event","children"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,aAAzB,QAA6C,OAA7C;;AAEA,OAAO,MAAMC,aAAa,gBAAGD,aAAa,EAAnC,C,CACP;;AACA,OAAO,MAAME,qBAAqB,GAAGC,KAAK,IAAI;AAAA;;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC,CAD0C,CAG9C;;AACI,QAAMO,SAAS,GAAIC,KAAD,IAAW;AACzBF,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH,GAFD;;AAGA,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAACD,MAAAA,MAAD;AAASC,MAAAA;AAAT,KAA/B;AAAA,cACKF,KAAK,CAACK;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAZM;;GAAMN,qB;;KAAAA,qB","sourcesContent":["// Set up context API \nimport React, {useState, createContext} from \"react\";\n\nexport const EventsContext = createContext();\n//UseState to store the list of Events in backends \nexport const EventsContextProvider = props => {\n    const [events, setEvents] = useState([]);\n\n//Render UI for Adding new events\n    const addEvents = (event) => {\n        setEvents([])\n    }\n    return (\n        <EventsContext.Provider value={{events, setEvents}}>\n            {props.children}\n        </EventsContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}