[{"/Users/EthanTran/Desktop/Squid-Note/src/index.js":"1","/Users/EthanTran/Desktop/Squid-Note/src/App.jsx":"2","/Users/EthanTran/Desktop/Squid-Note/src/routes/UpdatePage.jsx":"3","/Users/EthanTran/Desktop/Squid-Note/src/routes/EventDetailPage.jsx":"4","/Users/EthanTran/Desktop/Squid-Note/src/routes/Home.jsx":"5","/Users/EthanTran/Desktop/Squid-Note/src/components/Header.jsx":"6","/Users/EthanTran/Desktop/Squid-Note/src/components/AddEvent.jsx":"7","/Users/EthanTran/Desktop/Squid-Note/src/components/EventList.jsx":"8","/Users/EthanTran/Desktop/Squid-Note/src/context/EventsContext.js":"9","/Users/EthanTran/Desktop/Squid-Note/src/apis/EventFinder.js":"10","/Users/EthanTran/Desktop/Squid-Note/src/components/UpdateEvent.jsx":"11","/Users/EthanTran/Desktop/Squid-Note/src/components/StarRating.jsx":"12","/Users/EthanTran/Desktop/Squid-Note/src/components/Reviews.jsx":"13","/Users/EthanTran/Desktop/Squid-Note/src/components/AddReview.jsx":"14"},{"size":153,"mtime":1641442019846,"results":"15","hashOfConfig":"16"},{"size":718,"mtime":1641449098561,"results":"17","hashOfConfig":"16"},{"size":275,"mtime":1641753512602,"results":"18","hashOfConfig":"16"},{"size":1852,"mtime":1642812788341,"results":"19","hashOfConfig":"16"},{"size":367,"mtime":1641443423023,"results":"20","hashOfConfig":"16"},{"size":267,"mtime":1641442677898,"results":"21","hashOfConfig":"16"},{"size":2339,"mtime":1641751177497,"results":"22","hashOfConfig":"16"},{"size":4220,"mtime":1642812788340,"results":"23","hashOfConfig":"16"},{"size":751,"mtime":1641789463243,"results":"24","hashOfConfig":"16"},{"size":140,"mtime":1641532220236,"results":"25","hashOfConfig":"16"},{"size":2747,"mtime":1641755808960,"results":"26","hashOfConfig":"16"},{"size":748,"mtime":1642685088023,"results":"27","hashOfConfig":"16"},{"size":2229,"mtime":1642685036861,"results":"28","hashOfConfig":"16"},{"size":2436,"mtime":1642689538820,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1hfuf6z",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"/Users/EthanTran/Desktop/Squid-Note/src/index.js",[],["63","64"],"/Users/EthanTran/Desktop/Squid-Note/src/App.jsx",[],"/Users/EthanTran/Desktop/Squid-Note/src/routes/UpdatePage.jsx",[],"/Users/EthanTran/Desktop/Squid-Note/src/routes/EventDetailPage.jsx",["65"],"import React, { useContext, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport EventFinder from '../apis/EventFinder';\nimport AddReview from '../components/AddReview';\nimport Reviews from '../components/Reviews';\nimport StarRating from '../components/StarRating';\nimport { EventsContext } from '../context/EventsContext';\n\nconst EventDetailPage = () => {\n    const {id} = useParams();\n    const {selectedEvent, setSelectedEvent} = useContext(EventsContext)\n\n    //fetch a particular event name and render it on eventDetailPage via api\n    useEffect(() => {\n        const fetchData = async () => {\n\n            try {\n            const response = await EventFinder.get(`/${id}`);\n\n            setSelectedEvent(response.data.data);\n            } catch (err) {\n                console.log(err)\n            }\n        };\n\n        fetchData()\n    }, []);\n\n    //only render event name when event name is selected\n    return (\n        <div>\n            {selectedEvent && (\n                <>\n                <h1 className =\"text-center display-1 text-capitalize\">{selectedEvent.event.name}</h1>\n                {/* Reviews has access to events and reviews */}\n                <div className=\"text-center\">\n                {/* Render out the avr star rating in selected event via review counts in db */}\n                    <StarRating rating={selectedEvent.event.average_rating} />\n                    <span className=\"text-warning ml-1\">\n                        {selectedEvent.event.count ? `(${selectedEvent.event.count})` : \"(0)\"}\n                    </span>\n                </div>\n                <div className=\"mt-3\">\n                    <Reviews reviews={selectedEvent.reviews}/>\n                </div>\n                <AddReview/>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default EventDetailPage;\n","/Users/EthanTran/Desktop/Squid-Note/src/routes/Home.jsx",[],"/Users/EthanTran/Desktop/Squid-Note/src/components/Header.jsx",[],"/Users/EthanTran/Desktop/Squid-Note/src/components/AddEvent.jsx",[],"/Users/EthanTran/Desktop/Squid-Note/src/components/EventList.jsx",["66","67"],"import React, {useEffect, useContext} from 'react';\nimport EventFinder from '../apis/EventFinder';\nimport { EventsContext } from '../context/EventsContext';\nimport { useNavigate } from 'react-router-dom'; \nimport StarRating from './StarRating';\n\nconst EventList = (props) => {\n  const {events, setEvents} = useContext(EventsContext)\n//  Add updatepage redirect from update button via useNavigate \n  let navigate = useNavigate()\n// Fetch data as soon as user components is on UI screen\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await EventFinder.get(\"/\");\n                setEvents(response.data.data.events);\n            } catch(err) {\n                console.log(err)\n            }  \n        }   \n        \n        fetchData();\n    }, []);\n//Add function to delete an event via api\n     const handleDelete = async (e, id) => {\n         e.stopPropagation();\n        try{\n          const response = await EventFinder.delete(`/${id}`);\n          setEvents(events.filter(event => {\n              return event.id !== id\n          }));\n        } catch(err) {\n            console.log(err);\n        }\n     };\n\n     //update function to redirect to updatePage\n     const handleUpdate = (e, id) => {\n        e.stopPropagation();\n         navigate(`/events/${id}/update`);\n     };\n\n     const handleEventSelect = (id) => {\n         navigate(`/events/${id}`)\n     }\n     //Render out the Avr star rating of a selected event \n     const renderRating = (event) => {\n         if(!event.count) {\n             return <span className=\"text-warning\">0 reviews</span>\n         }\n         return(\n         <>\n         <StarRating rating={event.id} />\n         <span className=\"text-warning ml-1\">{event.count}</span>\n         </>\n         );\n     };\n\n    return (\n        <div className=\"list-group\">\n            <table className=\"table table-hover table-dark\">\n                <thead>\n                    <tr className=\"bg-primary\">\n                        <th scope=\"col\">Events</th>\n                        <th scope=\"col\">Location</th>\n                        <th scope=\"col\">Price Range</th>\n                        <th scope=\"col\">Ratings</th>\n                        <th scope=\"col\">Edit</th>\n                        <th scope=\"col\">Delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {events && events.map(event =>{\n                        return (\n                            <tr onClick={() => handleEventSelect(event.id)} key= {event.id}>\n                            <td className=\"text-capitalize\">{event.name}</td>\n                            <td className=\"text-capitalize\">{event.location}</td>\n                            <td>{\"$\".repeat(event.price_range)}</td>\n                            <td>{renderRating(event)}</td>\n                            <td>\n                                 <button onClick={(e)=> handleUpdate(e, event.id)} className=\"btn btn-warning\">Update</button>\n                            </td>\n                            <td>\n                                 <button onClick ={(e) => handleDelete(e, event.id)} className=\"btn btn-danger\">Delete</button>\n                            </td>\n                        </tr>\n                        );                \n                    })};\n\n                    {/* <tr>\n                        <td>SouthBank Walk</td>\n                        <td>SouthBank </td>\n                        <td> $$ </td>\n                        <td>Rating</td>\n                        <td><button className=\"btn btn-warning\">Update</button></td>\n                        <td><button className=\"btn btn-danger\">Delete</button></td>\n                    </tr>\n\n                    <tr>\n                        <td>SouthBank Walk</td>\n                        <td>SouthBank </td>\n                        <td> $$ </td>\n                        <td>Rating</td>\n                        <td><button className=\"btn btn-warning\">Update</button></td>\n                        <td><button className=\"btn btn-danger\">Delete</button></td>\n                    </tr> */}\n                </tbody>\n             </table>\n        </div>\n    );\n};\n\nexport default EventList; \n","/Users/EthanTran/Desktop/Squid-Note/src/context/EventsContext.js",[],"/Users/EthanTran/Desktop/Squid-Note/src/apis/EventFinder.js",[],"/Users/EthanTran/Desktop/Squid-Note/src/components/UpdateEvent.jsx",["68","69","70"],"import React, { useContext, useEffect, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router';\nimport EventFinder from '../apis/EventFinder';\nimport { EventsContext } from '../context/EventsContext';\n\nconst UpdateEvent = (props) => {\n    const {id} = useParams();\n    // navigate user back to homepage after updating event info\n    let navigate = useNavigate();\n    const { event } = useContext(EventsContext);\n    const [name, setName] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [priceRange, setPriceRange] = useState(\"\");\n\n    useEffect(() => {\n        const fetchData = async() => {\n            const response = await EventFinder.get(`/${id}`)\n            console.log(response.data.data) \n            setName(response.data.data.event.name)\n            setLocation(response.data.data.event.location)\n            setPriceRange(response.data.data.event.price_range)\n        };\n\n        fetchData()\n    }, []);\n\n    //handle submit function to update event via api\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n        const updateEvent = await EventFinder.put(`/${id}`, {\n            name,\n            location,\n            price_range: priceRange,\n        });\n        navigate(\"/\");\n    };\n\n    return (\n        <div>\n            <form action=\"\">\n              <div className=\"form-group\">\n                  <label htmlFor=\"name\">Name</label>\n                  <input value = {name} onChange={e => setName(e.target.value)} id=\"name\" className=\"form-control\" type=\"text\"/>\n              </div>\n\n              <div className=\"form-group\">\n                  <label htmlFor=\"name\">Location</label>\n                  <input value = {location} onChange={e => setLocation(e.target.value)} id=\"location\" className=\"form-control\" type=\"text\"/>\n              </div>\n              \n              <label htmlFor=\"price_range\">Price range</label>\n              <div className=\"col\">\n                        <select value = {priceRange} \n                        onChange={e => setPriceRange(e.target.value)} \n                        className= \"custom-select my-1 mr-sm-2\">\n                            <option disabled>Price Range</option>\n                            <option value=\"1\">$</option>\n                            <option value=\"2\">$$</option>\n                            <option value=\"3\">$$$</option>\n                            <option value=\"4\">$$$$</option>\n                            <option value=\"5\">$$$$$</option>\n                        </select>\n                     </div>\n                     <button type = \"submit\" onClick={handleSubmit} className=\"btn btn-primary\">Submit</button>\n            </form>\n        </div>\n    );\n};\n\nexport default UpdateEvent;\n","/Users/EthanTran/Desktop/Squid-Note/src/components/StarRating.jsx",[],"/Users/EthanTran/Desktop/Squid-Note/src/components/Reviews.jsx",[],"/Users/EthanTran/Desktop/Squid-Note/src/components/AddReview.jsx",["71"],"import React, { useState } from 'react';\nimport { useLocation, useParams, useNavigate } from 'react-router-dom';\nimport EventFinder from '../apis/EventFinder';\n\n// Create a user input for reviews of the selected event\nconst AddReview = () => {\n    const { id } = useParams(); \n    const location = useLocation()\n    const navigate = useNavigate()\n    const [name, setName] = useState(\"\")\n    const [reviewText, setReviewText] = useState(\"\")\n    const [rating, setRating] = useState(\"Rating\")\n\n    const handleSubmitReview = async (e) => {\n        e.preventDefault()\n        try {\n            const response = await EventFinder.post(`/${id}/addReview`, {\n                name,\n                review: reviewText,\n                rating,\n            });\n            navigate(\"/\");\n            navigate(location.pathname);\n        } catch (err) {\n            console.log(err)\n        }\n    };\n    return (\n        <div className=\"mb-2\">\n            <form action = \"\">\n                <div className=\"form-row\">\n                    <div className=\"form-group col-8\">\n                        <label htmlFor=\"name\">Name</label>\n                        <input value ={name} onChange={e => setName(e.target.value)} id=\"name\" placeholder=\"name\" type=\"text\" className=\"form-control\" />\n                    </div>\n                    <div className=\"form-group col-4\">\n                        <label htmlFor=\"rating\">Rating</label>\n                        <select value ={rating} onChange={e => setRating(e.target.value)} id=\"rating\" className=\"custom-select\">\n                            <option disabled>Rating</option>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"Review\">Review</label>\n                    <textarea value ={reviewText} onChange={e => setReviewText(e.target.value)}id=\"Review\" className=\"form-control\"></textarea>\n                </div>\n                <button type= \"submit\" onClick={handleSubmitReview} className=\"btn btn-primary\">Submit </button>\n            </form>\n        </div>\n    );\n};\n\nexport default AddReview;\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":27,"column":8,"nodeType":"78","endLine":27,"endColumn":10,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":23,"column":8,"nodeType":"78","endLine":23,"endColumn":10,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":28,"column":17,"nodeType":"84","messageId":"85","endLine":28,"endColumn":25},{"ruleId":"82","severity":1,"message":"86","line":10,"column":13,"nodeType":"84","messageId":"85","endLine":10,"endColumn":18},{"ruleId":"76","severity":1,"message":"87","line":25,"column":8,"nodeType":"78","endLine":25,"endColumn":10,"suggestions":"88"},{"ruleId":"82","severity":1,"message":"89","line":30,"column":15,"nodeType":"84","messageId":"85","endLine":30,"endColumn":26},{"ruleId":"82","severity":1,"message":"83","line":17,"column":19,"nodeType":"84","messageId":"85","endLine":17,"endColumn":27},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'setSelectedEvent'. Either include them or remove the dependency array.","ArrayExpression",["92"],"React Hook useEffect has a missing dependency: 'setEvents'. Either include it or remove the dependency array.",["93"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'event' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["94"],"'updateEvent' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [id, setSelectedEvent]",{"range":"101","text":"102"},"Update the dependencies array to be: [setEvents]",{"range":"103","text":"104"},"Update the dependencies array to be: [id]",{"range":"105","text":"106"},[871,873],"[id, setSelectedEvent]",[806,808],"[setEvents]",[961,963],"[id]"]